#version 440
out vec4 o_PixColor;

uniform float near;
uniform float far;
uniform mat4 projectionMatrix;
uniform uint tableElementCount;

// FragmentData computeData() function must be implemented by includee.

void main()
{
  o_PixColor = vec4(0);
  if (gl_SampleMaskIn[0] == 0)
    discard;

  // Detect main buffer overflow
  uint32_t count = atomicAdd(counters + screenSize * screenSize, 1);
  if (count > tableElementCount)
  {
    counters[screenSize * screenSize] = tableElementCount;
    discard;
  }

  // Compute fragment data

  FragmentData fragment = computeData();
  vec4 position = projectionMatrix * fragment.eyePos;

  fragmentData[count] = fragment;

  vec2 prj = position.xy / position.w;
  float zValue = 1.0 - (position.z + near) / (far + near);
  vec3 pos = vec3(prj * 0.5 + 0.5, zValue);
  uint32_t depth = uint32_t(pos.z * MAX_DEPTH);
  uvec2 pix = uvec2(pos.xy * screenSize);

  bool success = insert_preopen(depth, pix, count);

  // o_PixColor = success ? fragment.color : vec4(1, 0, 0, 0);
  discard;
}

