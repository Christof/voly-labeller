/*

Sylvain Lefebvre, Samuel Hornus, Anass Lasram - 2013

This file contains the base implementation of the A-buffer techniques
described in our GPUPro paper.

NOTES:
- atomicMax 64bits is emulated through a loop and a 64 bits atomicCAS.
  This can be directly replaced by a native atomicMax64 when available.
- Depth is currently encoded on 24 bits. This stems from the packing of
  the data in 64 bits records when using hashing.

Please visit http://www.antexel.com/research/gpupro5 for updates.

*/
// -------------------------------------------------

#extension GL_NV_shader_buffer_load : enable
#extension GL_NV_gpu_shader5 : enable
#extension GL_NV_shader_atomic_int64 : enable

#define MAX_DEPTH (1u << 24u)  // limited to 24 bits

// -------------------------------------------------

/**
 * \brief Data for each fragment stored in the HABuffer
 *
 * It consists of the color the position in eye space
 * and an objectId (for volumes).
 */
struct FragmentData
{
  vec4 color;
  vec4 eyePos;
  int objectId;
};

#ifndef GL_NV_shader_atomic_int64
uint64_t atomicMax64(coherent uint64_t *ptr, uint64_t val)
{
  uint64_t cur = *ptr;
  bool done = (val <= cur);
  while (!done)
  {
    uint64_t prev = cur;
    cur = atomicCompSwap(ptr, cur, val);
    if (cur == prev)
    {
      return cur;
      // done = true;
    }
    else
    {
      done = (val <= cur);
    }
  }
  return cur;
}
#endif

coherent uniform
    uint64_t *records;  // all fragment records (<depth|pointer> pairs)
coherent uniform uint32_t *counters;            // auxiliary counters
coherent uniform FragmentData *fragmentData;  // RGBA color of fragments

// global variable for temporary pointers
coherent uint64_t *recordsPtr;
coherent uint32_t *countsPtr;

uniform uint screenSize;
uniform uint tableSize;

uniform uvec2 offsets[256];

vec4 RGBA(uint32_t rgba)
{
  return vec4(float((rgba >> 24u) & 255u), float((rgba >> 16u) & 255u),
              float((rgba >> 8u) & 255u), float(rgba & 255u)) /
         255.0;
}

#define HA_MAX_DEPTH_1 ((MAX_DEPTH)-1u)
#define HA_KEY(a, depth)                                                       \
  ((uint32_t(a /*&uint32_t(   255)*/)                                          \
    << uint32_t(24)) |                            /* age   on  8 bits, MSB */  \
   (uint32_t(depth /*&uint32_t( MAX_DEPTH-1u)*/)) /* depth on 22 bits      */  \
   )
#define HA_PACK_DATA(a, depth, data)                                           \
  ((uint64_t(HA_KEY(a, depth)) << uint64_t(32)) + uint64_t(data))
#define HA_AGE(k)                                                              \
  uint32_t((uint32_t(k) >> uint32_t(24)) /*  & uint32_t(      255)*/)
#define HA_DEPTH(k) uint32_t((uint32_t(k)) & uint32_t(HA_MAX_DEPTH_1))
#define HA_INC_AGE_64 (uint64_t(1) << uint64_t(24 + 32))
#define HA_AGE_MASK_64 ((uint64_t(0x00ffffffu) << uint64_t(32)) + 0xffffffffu)
#define HA_WRITE_AGE_64(K, a)                                                  \
  ((K & HA_AGE_MASK_64) + (uint64_t(a) << uint64_t(32 + 24)))

uint64_t Saddr(uvec2 l)
{
  return uint64_t(l.x + l.y * screenSize);
}
uint64_t Haddr(uvec2 l)
{
  return uint64_t(l.x + l.y * tableSize);
}

// -------------------------------------------------

bool insert_preopen(uint32_t depth, uvec2 ij, uint32_t data)
{
  // limit depth
  depth = depth & uint32_t(HA_MAX_DEPTH_1);

  uint age = 1u;
  uint64_t key_info = HA_PACK_DATA(age, depth, data);

  countsPtr = counters + Saddr(ij);

  while (true)
  {

    uvec2 l = (ij + offsets[age]);
    uint64_t h = Haddr(l % uvec2(tableSize));

    recordsPtr = records + h;
#ifdef GL_NV_shader_atomic_int64
    uint64_t old = atomicMax(recordsPtr, key_info);
#else
    uint64_t old = atomicMax64(recordsPtr, key_info);
#endif

    // -> decide what to do next
    if (old < key_info)
    {
      // key_info was inserted! -> update max age table
      atomicMax(countsPtr, age);

      if (old == 0)
      {
        // -> stop on success
        break;
      }
      else
      {
        // -> evict
        age = uint32_t(old >> uint64_t(32 + 24));
        // recompute coordinates from offset
        ij = uvec2((l + uvec2(tableSize)) - offsets[age]) % uvec2(tableSize);

        countsPtr = counters + Saddr(ij);

        // reinsert evicted key
        key_info = old;
      }
    }
    // else, failed: try next age
    age++;
    key_info = key_info + HA_INC_AGE_64;
  }

  return true;
}

