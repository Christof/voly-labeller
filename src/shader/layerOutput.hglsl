layout(location = 0) out vec4 accumulatedOutputColor;
const int maxOutputColorsCount = 6;
float alphaFactors[maxOutputColorsCount] = float[](1.0, 0.93, 0.9, 0.88, 0.85, 0.83);
layout(location = 1) out vec4 outputColors[maxOutputColorsCount];
layout(depth_any) out float gl_FragDepth;

void setColorForLayerModified(int layerIndex, vec4 color)
{
  accumulatedOutputColor = vec4(0);
  for (int i = 0; i < maxOutputColorsCount; ++i)
    outputColors[i] = vec4(0);

  // color.a *= alphaFactors[layerIndex];

  const vec4 fontColor = vec4(0.12, 0.12, 0.12, color.a);
  const vec3 base = (1.6 - 0.17 * layerIndex) * vec3(0.463, 0.463, 0.463);
  const vec4 baseColor = vec4(base, color.a);
  outputColors[layerIndex] = color.r * baseColor + color.g * fontColor;
}

void setColorForLayer(int layerIndex, vec4 color)
{
  accumulatedOutputColor = vec4(0);
  for (int i = 0; i < maxOutputColorsCount; ++i)
    outputColors[i] = vec4(0);

  const vec4 baseColor = vec4(1, 0.317647059, 0.02745098, color.a);
  outputColors[layerIndex] = color;
}

void setColorForLayerDebug(int layerIndex, vec4 color)
{
  accumulatedOutputColor = vec4(0);
  for (int i = 0; i < maxOutputColorsCount; ++i)
    outputColors[i] = vec4(0);

  outputColors[layerIndex] = color;

  if (layerIndex == 0)
    outputColors[layerIndex].r = 0;
  else if (layerIndex == 1)
    outputColors[layerIndex].g = 0;
  else if (layerIndex == 2)
    outputColors[layerIndex].b = 0;
}
